const querystring = require("querystring");
const TokenGenerator = require('uuid-token-generator');
const { GoogleSpreadsheet } = require('google-spreadsheet');

exports.handler = async (event, context) => {
    // Only allow POST
    if (event.httpMethod === "GET") {
        return { statusCode: 405, body: "Method Not Allowed" };
    }

    if (event.httpMethod === "OPTIONS") {
        return {
            statusCode: 200,
            headers: {
                'X-Requested-With': '*',
                'Access-Control-Allow-Headers': 'Content-Type,Access-Control-Allow-Origin,Access-Control-Allow-Methods',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST,GET,OPTIONS',
                'Content-Type': 'application/json',
            },
        };
    }

    if (event.httpMethod === "POST") {
        // When the method is POST, the name will no longer be in the eventâ€™s
        // queryStringParameters â€“ itâ€™ll be in the event body encoded as a query string
        const body = JSON.parse(event.body);
        const name = body.firstName || "World";
        const {itemID} = event.queryStringParameters;
        const isEdit = !!itemID;
        const tokenGenerator = new TokenGenerator(); // Default is a 128-bit token encoded in base58
        const token = tokenGenerator.generate();

        console.log("** body",event.body)

        // // Initialize the sheet - doc ID is the long id in the sheets URL
        // const doc = new GoogleSpreadsheet(process.env.REACT_APP_GOOGLE_SHEETS_ID);

        // let privateKey = process.env.GOOGLE_PRIVATE_KEY && process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/gm, '\n')

        // // console.log("**** key121212 ", process.env.GOOGLE_PRIVATE_KEY)

        // // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
        // await doc.useServiceAccountAuth({
        // // env var values are copied from service account credentials generated by google
        // // see "Authentication" section in docs for more info
        //     client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
        //     private_key: privateKey,
        // });
        // await doc.loadInfo(); // loads document properties and worksheets

        // const sheet = doc.sheetsByTitle['Sessions']; // or use doc.sheetsById[id] or doc.sheetsByTitle[title]
        // // read rows
        // const rows = await sheet.getRows();
        // console.log(sheet.title);
        // console.log(rows.length || 0);

        // append row
        // await sheet.addRow(
        // { 
        //     'ðŸ”’ Row ID': token,
        //     'Patient ID': body.patientId,        
        // });

        const dataToSave = {
            'Patient ID': body.patientId,  
            'Session Date': body.sessionDate,
            'Amount Paid': body.amountPaid,
            'Amount Pending': body.amountPending,
            'Payment Mode': body.paymentMode,
            'Deposit Amount': body.depositAmount,
            'Report: Session Date': body.sessionDate,
            'Report: Patient Name': body.patientName,
            'Report: Collection Amount': body.amountPaid + body.depositAmount
        }

        if(!isEdit) dataToSave['ðŸ”’ Row ID'] = token;

        console.log("*** dataToSave", dataToSave)

        return {
            statusCode: 200,
            body: JSON.stringify({token:token, isEdit: isEdit, id: itemID, dataToSave:dataToSave}),
            headers: {
                'X-Requested-With': '*',
                'Access-Control-Allow-Headers': 'Content-Type,Access-Control-Allow-Origin,Access-Control-Allow-Methods',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST,GET,OPTIONS',
                'Content-Type': 'application/json',
            },
        };
    }
};

// exports.handler = async (event, context) => {
//     let response
//     try {
//       response = await fetch(API_ENDPOINT)
//       // handle response
//     } catch (err) {
//       return {
//         statusCode: err.statusCode || 500,
//         body: JSON.stringify({
//           error: err.message
//         })
//       }
//     }
  
//     return {
//       statusCode: 200,
//       body: JSON.stringify({
//         data: response
//       })
//     }
//   }